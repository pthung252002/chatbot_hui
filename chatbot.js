console.log("CHATBOT INIT");

function toggleChat() {
    let chatContainer = document.getElementById("chat-container");
    chatContainer.style.display = (chatContainer.style.display === "none" || chatContainer.style.display === "") ? "block" : "none";
}

let recognition;
let isListening = false;
let isWaitingForResponse = false;
let currentMenuElement = null;

if ("SpeechRecognition" in window || "webkitSpeechRecognition" in window) {
    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
} else {
    console.error("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ SpeechRecognition!");
    document.getElementById("mic-button").style.display = "none";
}

recognition.lang = 'vi-VN';
recognition.continuous = true;
recognition.interimResults = false;

recognition.onresult = function (event) {
    if (!isWaitingForResponse) {
        const speechText = event.results[event.results.length - 1][0].transcript.trim();
        if (speechText) {
            sendMessage(speechText);
        }
    }
};

recognition.onerror = function (event) {
    console.error("L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i:", event.error);
};

let micButton = document.getElementById("mic-button");
let sendButton = document.getElementById("button-send-mess");
let userInput = document.getElementById("user-input");

micButton.addEventListener("click", function () {
    if (!isListening && !isWaitingForResponse) {
        micButton.style.background = "green";
        recognition.start();
        isListening = true;
    } else {
        micButton.style.background = "red";
        recognition.abort();
        isListening = false;
    }
});

async function sendMessage(userInputText = null) {
    if (isWaitingForResponse) return;
    isWaitingForResponse = true;

    if (!userInputText) {
        userInputText = userInput.value.trim();
    }
    if (userInputText === '') {
        isWaitingForResponse = false;
        return;
    }

    appendMessage(userInputText, 'user');
    sendButton.disabled = true;
    micButton.disabled = true;
    userInput.disabled = true;

    const typingMessage = appendMessage("Chatbot ƒëang g√µ...", 'bot', true);

    const response = await fetch(
        "/Chatbot/getContent",
        {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ message: userInput }),
        }
    );

	const data = await response.json();
	const message = data[0];

	removeMessage(typingMessage)
	
	// N·∫øu l√† d·∫°ng json_message t·ª´ custom action
	if (message.custom && message.custom.html) {
		// Thay ƒë∆∞·ªùng d·∫´n ·∫£nh tr∆∞·ªõc khi hi·ªÉn th·ªã
		const updatedHtml = message.custom.html.replaceAll(`src='./`, `src='https://phanmemhui.com/`);
		appendMessage(updatedHtml, 'bot', true); // b·∫≠t ch·∫ø ƒë·ªô HTML
	} else {
		// V·ªõi text
		const text = message.text || JSON.stringify(message);
		appendMessage(text.replaceAll(`src='./`, `src='https://phanmemhui.com/`), 'bot');
	}

    isWaitingForResponse = false;
    sendButton.disabled = false;
    micButton.disabled = false;
    userInput.disabled = false;
    userInput.value = "";

    appendMessage("Anh/Ch·ªã mu·ªën h·ªèi th√™m g√¨ kh√¥ng ?", 'bot');
    renderMenu(menuData);
    menuStack = [];
}

function appendMessage(message, sender, isTyping = false) {
    const chatBox = document.getElementById("chat-box");
    const messageElement = document.createElement("div");
    messageElement.classList.add("message", sender + "-message");
    if (isTyping) {
        messageElement.setAttribute("id", "typing-indicator");
    }
    messageElement.innerHTML = message;
    chatBox.appendChild(messageElement);

    const isNearBottom = chatBox.scrollHeight - chatBox.scrollTop - chatBox.clientHeight < 100;

    if (isNearBottom) {
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    return messageElement;
}

function removeMessage(element) {
    if (element) element.remove();
}

userInput.addEventListener("keypress", function (event) {
    if (event.key === "Enter" && !isWaitingForResponse) {
        event.preventDefault();
        sendMessage();
    }
});

const menuData = {
    "Ph·∫ßn m·ªÅm": {
        "T·∫£i ph·∫ßn m·ªÅm": "c√°ch t·∫£i ph·∫ßn m·ªÅm",
    },
    "D√¢y h·ª•i": {
        "H·ªët h·ª•i": {
            "C√°ch h·ªët h·ª•i": "c√°ch h·ªët h·ª•i",
            "H·ªët h·ª•i nhi·ªÅu h·ªôi vi√™n c√πng k·ª≥": "c√°ch h·ªët h·ª•i nhi·ªÅu ng∆∞·ªùi c√πng k·ª≥"
        },
        "T·∫°o d√¢y h·ª•i": {
            "D√¢y h·ª•i m·ªõi": "c√°ch t·∫°o d√¢y h·ª•i m·ªõi",
            "D√¢y h·ª•i cho g√≥p": "c√°ch t·∫°o d√¢y h·ª•i cho g√≥p"
        },
        "ƒê√≥ng ti·ªÅn h·ª•i": "c√°ch ƒë√≥ng ti·ªÅn h·ª•i",
        "D√¢y h·ª•i m√£n": {
            "M·ªü d√¢y h·ª•i m√£n ho·∫°t ƒë·ªông tr·ªü l·∫°i": "c√°ch m·ªü h·ª•i m√£n tr·ªü l·∫°i ho·∫°t ƒë·ªông",
            "M√£n d√¢y h·ª•i": "c√°ch m√£n d√¢y h·ª•i"
        },
        "K·ª≥ h·ªët/ƒë√≥ng": {
            "X√≥a k·ª≥ h·ªët h·ª•i": "c√°ch x√≥a h·ªët h·ª•i",
            "X√≥a k·ª≥ h·ªët/ƒë√≥ng b·ªã l·ªói": "c√°ch x√≥a k·ª≥ h·ªët b·ªã l·ªói",
            "Thay ƒë·ªïi th√¥ng tin k·ª≥ h·ªët h·ª•i": "c√°ch thay ƒë·ªïi th√¥ng tin k·ª≥ h·ªët h·ª•i",
        }

    },
    "H·ªôi vi√™n": {
        "Gom h·ªôi vi√™n b·ªã tr√πng": "c√°ch gom h·ªôi vi√™n b·ªã tr√πng",
        "Thay ƒë·ªïi th√¥ng tin h·ªôi vi√™n": "c√°ch thay ƒë·ªïi h·ªôi vi√™n",
        "th√™m h·ªôi vi√™n/s·ªë ph·∫ßn h·ª•i": "c√°ch th√™m s·ªë ph·∫ßn h·ª•i",
        "gi·∫£m h·ªôi vi√™n/s·ªë ph·∫ßn h·ª•i": "c√°ch gi·∫£m s·ªë ph·∫ßn h·ª•i",
    },
    "T·∫•t to√°n h·ª•i": {
        "T·∫•t to√°n h·ª•i s·ªëng (san/b√°n d√¢y h·ª•i)": "c√°ch t·∫•t to√°n h·ª•i s·ªëng",
        "T·∫•t to√°n h·ª•i ch·∫øt (ƒë√∫p d√¢y h·ª•i)": "c√°ch t·∫•t to√°n h·ª•i ch·∫øt",
        "x√≥a t·∫•t to√°n/ƒë√∫p d√¢y h·ª•i": "c√°ch x√≥a t·∫•t to√°n h·ª•i ch·∫øt",
        "Kh√¥i ph·ª•c t·∫•t to√°n (h·ªßy ƒë√∫p d√¢y h·ª•i)": "c√°ch ph·ª•c h·ªìi t·∫•t to√°n h·ª•i ch·∫øt"
    },
    "H√≥a ƒë∆°n": {
        "In h√≥a ƒë∆°n/Bill": "in h√≥a ƒë∆°n"
    },
    "B·∫£ng √¢m d∆∞∆°ng": {
        "Xem c√¢n b·∫±ng √¢m d∆∞∆°ng c·ªßa h·ªôi vi√™n": "c√°ch c√¢n b·∫±ng √¢m d∆∞∆°ng",
        "ƒê√≥ng l·∫°i h·ª•i c≈© ƒë·ªÉ t√≠nh c√¢n b·∫±ng ch√≠nh x√°c": "c√°ch ƒë√≥ng l·∫°i h·ª•i c≈©"
    }
};

let menuStack = [];

function renderMenu(currentData) {
    const chatBox = document.getElementById("chat-box");
    const oldMenus = chatBox.querySelectorAll(".menu-message");
    oldMenus.forEach(menu => menu.remove());

    const menuMessage = document.createElement("div");
    menuMessage.classList.add("message", "menu-message");

    const container = document.createElement("div");
    for (const key in currentData) {
        const btn = document.createElement('button');
        btn.textContent = key;
        btn.classList.add("menu-button");
        btn.onclick = () => handleMenuClick(currentData[key], key);
        container.appendChild(btn);
    }

    if (menuStack.length > 0) {
        const backBtn = document.createElement("button");
        backBtn.textContent = "üîô Quay l·∫°i";
        backBtn.classList.add("menu-button"); backBtn.classList.add("menu-button", "back-button");
        backBtn.onclick = () => {
            menuStack.pop();
            const previousMenu = menuStack.length > 0 ? menuStack[menuStack.length - 1].data : menuData;
            renderMenu(previousMenu);
        };
        container.appendChild(backBtn);
    }

    menuMessage.appendChild(container);
    chatBox.appendChild(menuMessage);
    chatBox.scrollTop = chatBox.scrollHeight;
    currentMenuElement = menuMessage;
}

function handleMenuClick(next, label) {
    if (typeof next === 'string') {
        if (currentMenuElement) currentMenuElement.remove();
        sendMessage(next); // ch·ªâ g·ª≠i v√† hi·ªÉn th·ªã n·ªôi dung ƒë∆∞·ª£c g√°n
        menuStack = [];
        currentMenuElement = null;
    } else {
        menuStack.push({ data: next, label });
        renderMenu(next);
    }
}


window.onload = function () {
    appendMessage("B·∫°n c·∫ßn gi√∫p g√¨? H√£y ch·ªçn m·ªôt m·ª•c b√™n d∆∞·ªõi.", 'bot');
    renderMenu(menuData);
};
